import { useState } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Plus, Trash2 } from "lucide-react";

interface InvoiceFormProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess: () => void;
}

interface InvoiceItem {
  description: string;
  quantity: number;
  unit_price: number;
  total_price: number;
}

interface FormData {
  client_name: string;
  client_email: string;
  client_phone: string;
  client_address: string;
  client_document: string;
  due_date: string;
  notes: string;
  items: InvoiceItem[];
}

export function InvoiceForm({ open, onOpenChange, onSuccess }: InvoiceFormProps) {
  const { register, handleSubmit, reset, control, watch, setValue, formState: { errors } } = useForm<FormData>({
    defaultValues: {
      items: [{ description: '', quantity: 1, unit_price: 0, total_price: 0 }]
    }
  });
  const { fields, append, remove } = useFieldArray({
    control,
    name: "items"
  });
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);

  const watchedItems = watch("items");

  // Calculate totals
  const subtotal = watchedItems.reduce((sum, item) => sum + (item.total_price || 0), 0);
  const taxAmount = subtotal * 0.1; // 10% tax example
  const total = subtotal + taxAmount;

  const updateItemTotal = (index: number) => {
    const quantity = watchedItems[index]?.quantity || 0;
    const unitPrice = watchedItems[index]?.unit_price || 0;
    const totalPrice = quantity * unitPrice;
    setValue(`items.${index}.total_price`, totalPrice);
  };

  const onSubmit = async (data: FormData) => {
    setLoading(true);
    try {
      // Create invoice
      const { data: invoiceData, error: invoiceError } = await supabase
        .from('invoices')
        .insert({
          invoice_number: '', // Will be auto-generated by trigger
          client_name: data.client_name,
          client_email: data.client_email,
          client_phone: data.client_phone,
          client_address: data.client_address,
          client_document: data.client_document,
          due_date: data.due_date,
          total_amount: subtotal,
          tax_amount: taxAmount,
          net_amount: total,
          notes: data.notes,
          company_id: '00000000-0000-0000-0000-000000000000', // Temporary
          created_by: '00000000-0000-0000-0000-000000000000' // Temporary
        })
        .select()
        .single();

      if (invoiceError) throw invoiceError;

      // Create invoice items
      const itemsToInsert = data.items.map(item => ({
        invoice_id: invoiceData.id,
        description: item.description,
        quantity: item.quantity,
        unit_price: item.unit_price,
        total_price: item.total_price
      }));

      const { error: itemsError } = await supabase
        .from('invoice_items')
        .insert(itemsToInsert);

      if (itemsError) throw itemsError;

      toast({
        title: "Sucesso!",
        description: `Fatura ${invoiceData.invoice_number} criada com sucesso.`,
      });

      reset();
      onOpenChange(false);
      onSuccess();
    } catch (error) {
      console.error('Error creating invoice:', error);
      toast({
        title: "Erro",
        description: "Erro ao criar fatura.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Nova Fatura</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Client Information */}
          <Card>
            <CardHeader>
              <CardTitle>Dados do Cliente</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="client_name">Nome/Razão Social</Label>
                  <Input
                    {...register("client_name", { required: "Campo obrigatório" })}
                    placeholder="Nome do cliente"
                  />
                  {errors.client_name && <span className="text-sm text-destructive">{errors.client_name.message}</span>}
                </div>

                <div>
                  <Label htmlFor="client_document">CPF/CNPJ</Label>
                  <Input
                    {...register("client_document")}
                    placeholder="000.000.000-00"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="client_email">E-mail</Label>
                  <Input
                    {...register("client_email")}
                    type="email"
                    placeholder="cliente@exemplo.com"
                  />
                </div>

                <div>
                  <Label htmlFor="client_phone">Telefone</Label>
                  <Input
                    {...register("client_phone")}
                    placeholder="(11) 99999-9999"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="client_address">Endereço</Label>
                <Textarea
                  {...register("client_address")}
                  placeholder="Endereço completo do cliente"
                  rows={2}
                />
              </div>
            </CardContent>
          </Card>

          {/* Invoice Details */}
          <Card>
            <CardHeader>
              <CardTitle>Detalhes da Fatura</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="due_date">Data de Vencimento</Label>
                  <Input
                    {...register("due_date", { required: "Campo obrigatório" })}
                    type="date"
                  />
                  {errors.due_date && <span className="text-sm text-destructive">{errors.due_date.message}</span>}
                </div>
              </div>

              <div>
                <Label htmlFor="notes">Observações</Label>
                <Textarea
                  {...register("notes")}
                  placeholder="Observações adicionais"
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Invoice Items */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Itens da Fatura</CardTitle>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => append({ description: '', quantity: 1, unit_price: 0, total_price: 0 })}
              >
                <Plus className="h-4 w-4 mr-2" />
                Adicionar Item
              </Button>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {fields.map((field, index) => (
                  <div key={field.id} className="grid grid-cols-12 gap-2 items-end">
                    <div className="col-span-5">
                      <Label htmlFor={`items.${index}.description`}>Descrição</Label>
                      <Input
                        {...register(`items.${index}.description` as const, { required: "Campo obrigatório" })}
                        placeholder="Descrição do item/serviço"
                      />
                    </div>

                    <div className="col-span-2">
                      <Label htmlFor={`items.${index}.quantity`}>Qtd.</Label>
                      <Input
                        {...register(`items.${index}.quantity` as const, { 
                          required: "Campo obrigatório",
                          valueAsNumber: true,
                          onChange: () => updateItemTotal(index)
                        })}
                        type="number"
                        step="0.001"
                        min="0"
                      />
                    </div>

                    <div className="col-span-2">
                      <Label htmlFor={`items.${index}.unit_price`}>Preço Unit.</Label>
                      <Input
                        {...register(`items.${index}.unit_price` as const, { 
                          required: "Campo obrigatório",
                          valueAsNumber: true,
                          onChange: () => updateItemTotal(index)
                        })}
                        type="number"
                        step="0.01"
                        min="0"
                      />
                    </div>

                    <div className="col-span-2">
                      <Label htmlFor={`items.${index}.total_price`}>Total</Label>
                      <Input
                        {...register(`items.${index}.total_price` as const)}
                        type="number"
                        step="0.01"
                        readOnly
                        className="bg-muted"
                      />
                    </div>

                    <div className="col-span-1">
                      {fields.length > 1 && (
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => remove(index)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>

              {/* Totals */}
              <div className="border-t pt-4 mt-4">
                <div className="space-y-2 max-w-sm ml-auto">
                  <div className="flex justify-between">
                    <span>Subtotal:</span>
                    <span>R$ {subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Impostos (10%):</span>
                    <span>R$ {taxAmount.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between font-bold text-lg border-t pt-2">
                    <span>Total:</span>
                    <span>R$ {total.toFixed(2)}</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-end gap-2">
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancelar
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? "Criando..." : "Criar Fatura"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}